name: Demonstrate an issue with the MEX of MATLAB R2025a, expected to segfault with R2025a, except [14, latest]-true

on:
  # Trigger the workflow by cron. The default time zone of GitHub Actions is UTC.
  schedule:
    - cron: '0 18 1 * *'
  # Trigger the workflow when it is manually triggered
  workflow_dispatch:

env:
  MATLAB_RELEASE: latest

jobs:
  test:
    name: Demonstrate an issue with the MEX of MATLAB R2025a
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest]
        matlab_release: [R2021a, R2024b, R2025a, latest]
        gfortran_version: [10, 13, 14, latest]
        use_system_libgcc: [true, false]  # Whether to use the system libgcc or the one shipped with MATLAB.
        exclude:
          - os: ubuntu-22.04
            gfortran_version: 14
          - os: ubuntu-22.04
            gfortran_version: latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v5.0.0
        with:
          submodules: recursive

      - name: Miscellaneous setup
        run: bash .github/scripts/misc_setup

      - name: Decide the gfortran version to use
        run: |
          if [[ "${{ matrix.gfortran_version }}" == "latest" ]]; then
              export GFORTRAN_VERSION=${{ env.GFORTRAN_VERSION }}
          else
              export GFORTRAN_VERSION=${{ matrix.gfortran_version }}
              echo "GFORTRAN_VERSION=${GFORTRAN_VERSION}" >> $GITHUB_ENV
          fi
          echo "To use gfortran version ${GFORTRAN_VERSION}"

      - name: Set up gfortran on Linux
        if: startsWith(matrix.os, 'ubuntu')
        uses: fortran-lang/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GFORTRAN_VERSION }}

      - name: Check gfortran version
        shell: bash
        run: |
          which gcc && gcc --version && which gfortran && gfortran --version

      - name: Set up MATLAB
        uses: matlab-actions/setup-matlab@v2.5.0
        with:
          release: ${{ matrix.matlab_release }}

      - name: Link system libgcc to MATLAB if needed
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          matlab_root=$(realpath $(dirname $(which matlab))/../)
          echo "MATLAB root is ${matlab_root}"

          matlab_libgcc="${matlab_root}/sys/os/glnxa64/libgcc_s.so.1"
          echo "MATLAB libgcc is:"
          ls -alh ${matlab_libgcc} || exit 42
          echo "gcc strings in MATLAB libgcc are:"
          strings ${matlab_libgcc} | grep -iE "^GCC_"
          echo "latest gcc version string in MATLAB libgcc is:"
          readelf -V ${matlab_libgcc} | grep -oiE 'GCC_([0-9]+)(.[0-9]+){0,2}' | sort -V | tail -1

          system_libgcc="/usr/lib/x86_64-linux-gnu/libgcc_s.so.1"
          echo "System libgcc is:"
          ls -alh ${system_libgcc} || exit 42
          echo "gcc strings in system libgcc are:"
          strings ${system_libgcc} | grep -iE "^GCC_"
          echo "latest gcc version string in system libgcc is:"
          readelf -V ${system_libgcc} | grep -oiE 'GCC_([0-9]+)(.[0-9]+){0,2}' | sort -V | tail -1

          if [[ "${{ matrix.use_system_libgcc }}" == "true" ]] ; then
              ln -sf ${system_libgcc} ${matlab_libgcc} || exit 42
              echo "Linked ${system_libgcc} to ${matlab_libgcc}."
          else
              echo "Keep ${matlab_libgcc} untouched."
          fi
          echo "After the operation, MATLAB libgcc is:"
          ls -alh ${matlab_libgcc} || exit 42
          echo "gcc strings in MATLAB libgcc are:"
          strings ${matlab_libgcc} | grep -iE "^GCC_"
          echo "latest gcc version string in MATLAB libgcc is:"
          readelf -V ${matlab_libgcc} | grep -oiE 'GCC_([0-9]+)(.[0-9]+){0,2}' | sort -V | tail -1

      - name: Run script
        uses: matlab-actions/run-command@v2.2.1
        with:
          command: |
              cd('segfault_2025a');
              test;
